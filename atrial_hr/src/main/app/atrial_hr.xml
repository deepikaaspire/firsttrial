<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:context="http://www.springframework.org/schema/context" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:wmq="http://www.mulesoft.org/schema/mule/ee/wmq" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
xmlns:spring="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/wmq http://www.mulesoft.org/schema/mule/ee/wmq/current/mule-wmq-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd">
    <db:generic-config name="Generic_Database_Configuration" url="${DBurl}" driverClassName="${DBdriver}" doc:name="Generic Database Configuration"/>
    <context:property-placeholder location="PathAndCredentials.properties"/>
    <file:connector name="File1" outputPattern="BAckup_[function:dateStamp].csv" autoDelete="false" streaming="true" validateConnections="true" doc:name="File"/>
    <file:connector name="File" autoDelete="false" streaming="true" validateConnections="true" doc:name="File"/>
    <jms:activemq-connector name="Active_MQ" brokerURL="tcp://localhost:61616" validateConnections="true" doc:name="Active MQ"/>
    <jms:activemq-connector name="Active_MQ1" brokerURL="tcp://localhost:61616" validateConnections="true" doc:name="Active MQ"/>
   
    <flow name="hr_to_payroll_systemFlow">
        <file:inbound-endpoint path="${input}" responseTimeout="10000" doc:name="Input_File_From_HR_System"  pollingFrequency="${inputFilePollingFrequence}" connector-ref="File">
            <file:filename-regex-filter pattern=".*csv" caseSensitive="false"/>
        </file:inbound-endpoint>
        <set-variable variableName="transform_payload" value="#[payload]" doc:name="BackUp_For_Payload_file"/>
        <message-properties-transformer scope="invocation" doc:name="for audit">
            <add-message-property key="filename" value="#[message.inboundProperties.originalFilename]"/>
            <add-message-property key="filesize" value="#[message.inboundProperties.fileSize]"/>
            <add-message-property key="destination" value="src\\main\\resources\\output\\"/>
            <add-message-property key="status" value="received"/>
            <add-message-property key="failure_count" value="0"/>
            <add-message-property key="success_count" value="0"/>
            <add-message-property key="finished" value="finished"/>
            <add-message-property key="failure" value="failure"/>
            <add-message-property key="processed_partially" value="processed_partially"/>
        </message-properties-transformer>
        <set-variable variableName="datetime" value=" #[new java.text.SimpleDateFormat(&quot;MM/dd/yyyy  HH:mm:ss&quot;).format(new java.util.Date((message.inboundProperties.timestamp)))]" doc:name="this.datetime"/>
        <db:select config-ref="Generic_Database_Configuration" doc:name="Select a record from audit_log">
            <db:parameterized-query><![CDATA[select top 1 * from Audit where filename = #[flowVars.filename]  order by version desc]]></db:parameterized-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload.size()!=0]">
                <message-properties-transformer scope="invocation" doc:name="version+1">
                    <add-message-property key="version" value="#[payload[0].version+1]"/>
                </message-properties-transformer>
            </when>
            <otherwise>
                <message-properties-transformer scope="invocation" doc:name="default version">
                    <add-message-property key="version" value="1"/>
                </message-properties-transformer>
            </otherwise>
        </choice>
        <db:insert config-ref="Generic_Database_Configuration" doc:name="Insertion for audit_log table">
            <db:parameterized-query><![CDATA[insert into Audit(filename,version,filesize,destination,created_ts,status,updated_ts) values(#[flowVars.filename],#[flowVars.version],#[flowVars.filesize],#[flowVars.destination],#[flowVars.datetime],#[flowVars.status],#[flowVars.datetime])]]></db:parameterized-query>
        </db:insert>
        <db:select config-ref="Generic_Database_Configuration" doc:name="Selet audit_log for status update">
            <db:parameterized-query><![CDATA[select top 1 [id] from Audit where filename = #[flowVars.filename]  order by version desc]]></db:parameterized-query>
        </db:select>
        <message-properties-transformer scope="invocation" doc:name="audit id for update">
            <add-message-property key="audit_id" value="#[payload[0].id]"/>
            <add-message-property key="dest_success" value="#[flowVars.destination +'/Successfully Completed Files']"/>
            <add-message-property key="dest_fail" value="#[flowVars.destination +'/Failure Files']"/>
            <add-message-property key="dest_partial" value="#[flowVars.destination +'/Partially processed Files']"/>
        </message-properties-transformer>
        <set-payload value="#[flowVars.transform_payload]" doc:name="Intpu_file_payload"/>
        <dw:transform-message metadata:id="77c98cd9-0bda-4e83-af31-d27f84df31b8" doc:name="Transform CSV to XML">
            <dw:input-payload doc:sample="sample_data\list_csv.csv" mimeType="application/csv"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
EmployeeDetails: {
(payload map {
Employee: {
EmployeeId: $.EmployeeId,
EmployeeName: $.EmployeeName,
EmployeeAge: $.EmployeeAge,
EmployeeDesignation: $.EmployeeDesignation,
EmployeeDepartment: $.EmployeeDepartment,
EmployeeAddress: $.EmployeeAddress,
EmployeeOperation: $.EmployeeOperation
}
})
}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>

        <foreach collection="#[xpath('//Employee')]" doc:name="For Each">
            <logger message="hi" level="INFO" doc:name="current data"/>

            <message-properties-transformer scope="invocation" doc:name="Variables for Employee Details">
                <add-message-property key="EmployeeId" value="#[Integer.parseInt(xpath3('//EmployeeId'))]"/>
                <add-message-property key="EmployeeName" value="#[xpath3('//EmployeeName')]"/>
                <add-message-property key="EmployeeAge" value="#[Integer.parseInt(xpath3('//EmployeeAge'))]"/>
                <add-message-property key="EmployeeDesignation" value="#[xpath3('//EmployeeDesignation')]"/>
                <add-message-property key="EmployeeDepartment" value="#[xpath3('//EmployeeDepartment')]"/>
                <add-message-property key="EmployeeAddress" value="#[xpath3('//EmployeeAddress')]"/>
                <add-message-property key="EmployeeOperation" value="#[xpath3('//EmployeeOperation')]"/>
            </message-properties-transformer>
            <logger message="#[payload]" level="INFO" doc:name="Logger"/>
            <choice doc:name="Choice Based On Operation">

                <when expression="#[xpath3('//EmployeeOperation') == 'Update']">
                    <db:select config-ref="Generic_Database_Configuration" doc:name="Fetch employee Data">
                        <db:parameterized-query><![CDATA[select * from Employee where EmployeeId = #[flowVars.EmployeeId]]]></db:parameterized-query>
                    </db:select>
                    <choice doc:name="Update">
                        <when expression="#[payload.size()!=empty &amp;&amp; payload[0].EmployeeId == flowVars.EmployeeId &amp;&amp; flowVars.EmployeeId!=empty &amp;&amp; flowVars.EmployeeName!= empty &amp;&amp; flowVars.EmployeeAge!= empty &amp;&amp; flowVars.EmployeeDesignation!= empty &amp;&amp;flowVars.EmployeeDepartment!= empty &amp;&amp;flowVars.EmployeeAddress!= empty &amp;&amp;(payload[0].EmployeeName!=flowVars.EmployeeName || payload[0].EmployeeAge!=flowVars.EmployeeAge || payload[0].EmployeeDesignation!=flowVars.EmployeeDesignation || payload[0].EmployeeDepartment!=flowVars.EmployeeDepartment || payload[0].EmployeeAddress!=flowVars.EmployeeAddress)]">
                            <db:update config-ref="Generic_Database_Configuration" doc:name="Update Emp Details">
                                <db:parameterized-query><![CDATA[update Employee
SET EmployeeName = #[flowVars.EmployeeName], EmployeeAge = #[flowVars.EmployeeAge], EmployeeDesignation = #[flowVars.EmployeeDesignation], EmployeeDepartment = #[flowVars.EmployeeDepartment], EmployeeAddress = #[flowVars.EmployeeAddress], EmployeeOperation = #[flowVars.EmployeeOperation] 
WHERE EmployeeId = #[flowVars.EmployeeId];]]></db:parameterized-query>
                            </db:update>
                            <message-properties-transformer scope="invocation" doc:name="s3">
                                <add-message-property key="success_count" value="#[Integer.parseInt(flowVars.success_count)+1]"/>
                            </message-properties-transformer>
                            <logger message="UPDATED #[flowVars.success_count]" level="INFO" doc:name="message of success count"/>

                        </when>
                        <otherwise>
                            <message-properties-transformer scope="invocation" doc:name="f1">
                                <add-message-property key="failure_count" value="#[Integer.parseInt(flowVars.failure_count)+1]"/>
                            </message-properties-transformer>
                            <logger message="Check ur data #[flowVars.failure_count]" level="INFO" doc:name="message of failure count"/>

                        </otherwise>
                    </choice>

                </when>
                <when expression="#[xpath3('//EmployeeOperation') == 'Delete']">
                    <db:select config-ref="Generic_Database_Configuration" doc:name="Select employee Data">
                        <db:parameterized-query><![CDATA[select * from Employee where EmployeeId = #[flowVars.EmployeeId]]]></db:parameterized-query>
                    </db:select>
                    <choice doc:name="Delete">
                        <when expression="#[payload.size()!=empty &amp;&amp; payload[0].EmployeeId == flowVars.EmployeeId]">
                            <db:delete config-ref="Generic_Database_Configuration" doc:name="Delete Emp Details">
                                <db:parameterized-query><![CDATA[Delete from Employee where EmployeeId = #[flowVars.EmployeeId]]]></db:parameterized-query>
                            </db:delete>
                            <message-properties-transformer scope="invocation" doc:name="s1">
                                <add-message-property key="success_count" value="#[Integer.parseInt(flowVars.success_count)+1]"/>
                            </message-properties-transformer>
                            <logger message="DELETED  #[flowVars.success_count]" level="INFO" doc:name="delete success count"/>
                        </when>
                        <otherwise>
                            <message-properties-transformer scope="invocation" doc:name="f2">
                                <add-message-property key="failure_count" value="#[Integer.parseInt(flowVars.failure_count)+1]"/>
                            </message-properties-transformer>
                            <logger message="Given Data is Not Exist   #[flowVars.failure_count]" level="INFO" doc:name="delete failure count"/>
                            <jms:outbound-endpoint queue="failurequeue" connector-ref="Active_MQ" doc:name="JMS"/>
                            <flow-ref name="atrial_hrFlow" doc:name="atrial_hrFlow"/>

                        </otherwise>
                    </choice>

                </when>
                <when expression="#[xpath3('//EmployeeOperation') == 'Insert']">
                    <choice doc:name="Insert">
                        <when expression="#[flowVars.EmployeeId!=empty &amp;&amp; flowVars.EmployeeName!= empty &amp;&amp; flowVars.EmployeeAge!= empty &amp;&amp; flowVars.EmployeeDesignation!= empty &amp;&amp;flowVars.EmployeeDepartment!= empty &amp;&amp;flowVars.EmployeeAddress!= empty &amp;&amp;flowVars.EmployeeOperation!= empty]">
                            <db:insert config-ref="Generic_Database_Configuration" doc:name="Insert Emp Detail">
                                <db:parameterized-query><![CDATA[insert into Employee values(#[flowVars.EmployeeId], #[flowVars.EmployeeName],#[flowVars.EmployeeAge],#[flowVars.EmployeeDesignation], #[flowVars.EmployeeDepartment], #[flowVars.EmployeeAddress], #[flowVars.EmployeeOperation])]]></db:parameterized-query>

                            </db:insert>
                            <message-properties-transformer scope="invocation" doc:name="s2">
                                <add-message-property key="success_count" value="#[Integer.parseInt(flowVars.success_count)+1]"/>
                            </message-properties-transformer>
                            <logger message="INSERTED  #[flowVars.success_count]" level="INFO" doc:name="insert success count"/>
                        </when>
                        <otherwise>
                            <message-properties-transformer scope="invocation" doc:name="f3">
                                <add-message-property key="failure_count" value="#[Integer.parseInt(flowVars.failure_count)+1]"/>
                            </message-properties-transformer>
                            <logger message="Check the data for null empty &amp; white space #[flowVars.failure_count]" level="INFO" doc:name="insert failure count"/>

                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <logger message="Operation Should &quot;Insert /Update /Delete&quot;" level="INFO" doc:name="operation failed"/>
                </otherwise>
            </choice>
            <message-properties-transformer scope="invocation" doc:name="Total Counter">
                <add-message-property key="total_Couter" value="#[flowVars.counter]"/>
            </message-properties-transformer>


        </foreach>
        <set-variable variableName="current_time" value="#[new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;).format(new java.util.Date((message.inboundProperties.timestamp)))]" doc:name="Variable"/>
        <logger message="#[flowVars.total_Couter], #[flowVars.success_count], #[flowVars.failure_count] #[flowVars.current_time]" level="INFO" doc:name="Logger"/>
        <choice doc:name="OutPut File Router">
            <when expression="#[flowVars.total_Couter == flowVars.success_count]">
                <db:update config-ref="Generic_Database_Configuration" doc:name="success state">
                    <db:parameterized-query><![CDATA[update Audit
SET status = #[flowVars.finished], updated_ts = #[flowVars.current_time] 
WHERE id = #[flowVars.audit_id];]]></db:parameterized-query>
                </db:update>
                <file:outbound-endpoint path="${Success_output}"  responseTimeout="10000" doc:name="Sucess" connector-ref="File1"/>
                <db:update config-ref="Generic_Database_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[update Audit
SET destination=#[flowVars.dest_success]
WHERE id = #[flowVars.audit_id];]]></db:parameterized-query>
                </db:update>
            </when>
            <when expression="#[flowVars.total_Couter == flowVars.failure_count]">
                <db:update config-ref="Generic_Database_Configuration" doc:name="failure state">
                    <db:parameterized-query><![CDATA[update Audit
SET status = #[flowVars.failure], updated_ts = #[flowVars.current_time] 
WHERE id = #[flowVars.audit_id];]]></db:parameterized-query>
                </db:update>
                <file:outbound-endpoint path="${Failure_output}" responseTimeout="10000" doc:name="Failure file" connector-ref="File1"/>
                <db:update config-ref="Generic_Database_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[update Audit
SET destination=#[flowVars.dest_fail]
WHERE id = #[flowVars.audit_id];]]></db:parameterized-query>
                </db:update>
            </when>
            <otherwise>
                <db:update config-ref="Generic_Database_Configuration" doc:name="partial state">
                    <db:parameterized-query><![CDATA[update Audit
SET status = #[flowVars.processed_partially], updated_ts = #[flowVars.current_time] 
WHERE id = #[flowVars.audit_id];]]></db:parameterized-query>
                </db:update>
                <file:outbound-endpoint path="${Partial_output}" responseTimeout="10000" doc:name="Partial Files" connector-ref="File1"/>
                <db:update config-ref="Generic_Database_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[update Audit
SET destination=#[flowVars.dest_partial]
WHERE id = #[flowVars.audit_id];]]></db:parameterized-query>
                </db:update>
            </otherwise>
        </choice>
        <set-payload value="Hi Success Count =  #[flowVars.success_count], Failure Count + #[flowVars.failure_count],Total count=#[flowVars.total_couter]" doc:name="Set Payload"/>
        <smtp:outbound-endpoint host="mail.aspiresystems.biz" to="deepika.selva@aspiresys.com" responseTimeout="10000" doc:name="E-mail Notification" subject="Hr to Payroll Integration"/>


    </flow>
    <flow name="atrial_hrFlow">
        <jms:inbound-endpoint queue="activequeue" connector-ref="Active_MQ1" doc:name="JMS"/>
        <logger level="INFO" doc:name="Logger" message="success"/>
    </flow>
</mule>
